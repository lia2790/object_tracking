#include "FlyCap.h"

using namespace std;


void FlyCap::startVideo()
{
	 error = camera->Connect(0);
    if ( error != PGRERROR_OK )
    {
        std::cout << "Failed to connect to camera" << std::endl; return;    
    }
    
    // Get the camera info and print it out
    error = camera->GetCameraInfo( &camInfo );
    if ( error != PGRERROR_OK )
    {
        std::cout << "Failed to get camera info from camera" << std::endl;  return;   
  
    }
    std::cout << camInfo.vendorName << " "
    		  << camInfo.modelName << " " 
    		  << camInfo.serialNumber << std::endl;
	
	error = camera->StartCapture();
    if ( error == PGRERROR_ISOCH_BANDWIDTH_EXCEEDED )
    {
        std::cout << "Bandwidth exceeded" << std::endl; return;
    }
    else if ( error != PGRERROR_OK )
    {
        std::cout << "Failed to start image capture" << std::endl; return;
    } 
	
}

void FlyCap::takeImageFromVideo()
{
		Image rawImage;
		error = camera->RetrieveBuffer( &rawImage );
		if ( error != PGRERROR_OK )
			std::cout << "capture error" << std::endl;
		
		// convert to rgb
	   Image rgbImage;
      rawImage.Convert( FlyCapture2::PIXEL_FORMAT_BGR, &rgbImage );
       
		// convert to OpenCV Mat
		unsigned int rowBytes = (double)rgbImage.GetReceivedDataSize()/(double)rgbImage.GetRows();       
		image_for_OPENCV = cv::Mat(rgbImage.GetRows(), rgbImage.GetCols(), CV_8UC3, rgbImage.GetData(),rowBytes);
}

void FlyCap::closeVideo()
{

	error = camera->StopCapture();
    if ( error != PGRERROR_OK )
    {
        // This may fail when the camera was removed, so don't show 
        // an error message
    }  
	
	camera->Disconnect();
}


